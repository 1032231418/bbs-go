
package services

import (
	"github.com/mlogclub/mlog/model"
	"github.com/mlogclub/mlog/repositories"
	"github.com/mlogclub/simple"
)

var UserTokenService = newUserTokenService()

func newUserTokenService() *userTokenService {
	return &userTokenService {}
}

type userTokenService struct {
}

func (this *userTokenService) Get(id int64) *model.UserToken {
	return repositories.UserTokenRepository.Get(simple.GetDB(), id)
}

func (this *userTokenService) Take(where ...interface{}) *model.UserToken {
	return repositories.UserTokenRepository.Take(simple.GetDB(), where...)
}

func (this *userTokenService) QueryCnd(cnd *simple.QueryCnd) (list []model.UserToken, err error) {
	return repositories.UserTokenRepository.QueryCnd(simple.GetDB(), cnd)
}

func (this *userTokenService) Query(queries *simple.ParamQueries) (list []model.UserToken, paging *simple.Paging) {
	return repositories.UserTokenRepository.Query(simple.GetDB(), queries)
}

func (this *userTokenService) Create(t *model.UserToken) error {
	return repositories.UserTokenRepository.Create(simple.GetDB(), t)
}

func (this *userTokenService) Update(t *model.UserToken) error {
	return repositories.UserTokenRepository.Update(simple.GetDB(), t)
}

func (this *userTokenService) Updates(id int64, columns map[string]interface{}) error {
	return repositories.UserTokenRepository.Updates(simple.GetDB(), id, columns)
}

func (this *userTokenService) UpdateColumn(id int64, name string, value interface{}) error {
	return repositories.UserTokenRepository.UpdateColumn(simple.GetDB(), id, name, value)
}

func (this *userTokenService) Delete(id int64) {
	repositories.UserTokenRepository.Delete(simple.GetDB(), id)
}

